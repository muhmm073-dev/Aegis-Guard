#======================================================================
# GEREKLİ TÜM KÜTÜPHANELER
#======================================================================
import tkinter as tk
from tkinter import ttk, font, filedialog, messagebox, simpledialog
import psutil
import time
import collections
import hashlib
import os
import threading
import json

#======================================================================
# YENİ: MERKEZİ TEMA VE STİL YÖNETİMİ
#======================================================================
class Theme:
    BG_PRIMARY = "#1E1E1E"
    BG_SECONDARY = "#2D2D2D"
    BG_WIDGET = "#121212"
    TEXT_PRIMARY = "#EAEAEA"
    TEXT_SECONDARY = "#A9A9A9"
    ACCENT_PRIMARY = "#007ACC"
    ACCENT_SECONDARY = "#00FF41"
    DANGER_COLOR = "#8B0000"
    
    FONT_DEFAULT = ("Segoe UI", 10)
    FONT_BOLD = ("Segoe UI", 10, "bold")
    FONT_LARGE = ("Segoe UI", 14)
    FONT_XLARGE_BOLD = ("Segoe UI", 24, "bold")
    FONT_MONO = ("Consolas", 11)

#======================================================================
# MODÜLLER (ConfigManager, SystemService, Çekirdekler...)
#======================================================================
# (Bu modüllerin iç mantığında büyük bir değişiklik yok, önceki kodla aynı)
class ConfigManager:
    def __init__(self, config_file='config.json'): self.config_file = config_file; self.config = self.load_config()
    def load_config(self):
        try:
            with open(self.config_file, 'r') as f: return json.load(f)
        except (FileNotFoundError, json.JSONDecodeError): return self._create_default_config()
    def _create_default_config(self):
        default_config = {"distraction_apps": ["slack.exe", "discord.exe", "spotify.exe", "steam.exe"], "distraction_sites": ["facebook.com", "twitter.com", "youtube.com", "instagram.com", "netflix.com"]}
        self.save_config(default_config)
        return default_config
    def save_config(self, config_data=None):
        if config_data: self.config = config_data
        with open(self.config_file, 'w') as f: json.dump(self.config, f, indent=4)
    def get(self, key): return self.config.get(key, [])
    def set(self, key, value): self.config[key] = value

class SystemService:
    def get_cpu_usage(self): return psutil.cpu_percent(interval=None)
    def get_ram_usage(self): return psutil.virtual_memory().percent

class AegisHub:
    def __init__(self): self.log_queue = collections.deque(maxlen=20); self.ui_update_callbacks = {}
    def register_ui_callback(self, name, callback): self.ui_update_callbacks[name] = callback
    def log(self, message, sender="CORE"): self.log_queue.append(f"[{sender}] > {message}")
    def broadcast_update(self, update_type, data=None):
        if update_type in self.ui_update_callbacks: self.ui_update_callbacks[update_type](data)

class OptimusHybrid:
    def __init__(self, hub): self.hub = hub
    def dikkat_dagiticilari_yonet(self, app_list):
        self.hub.log(f"Odak Modu: {len(app_list)} uygulama denetleniyor...", "OPTIMUS")
        killed_count = 0
        for proc in psutil.process_iter(['name', 'pid']):
            if proc.info['name'] in app_list:
                try: psutil.Process(proc.info['pid']).kill(); killed_count += 1
                except (psutil.NoSuchProcess, psutil.AccessDenied): pass
        self.hub.log(f"Toplam {killed_count} dikkat dağıtıcı uygulama kapatıldı.", "OPTIMUS")

class AegisGuardian:
    def __init__(self, hub):
        self.hub = hub
        self.hosts_path = "C:\\Windows\\System32\\drivers\\etc\\hosts"
        self.block_marker_start = "# AEGIS X BLOCK START"
        self.block_marker_end = "# AEGIS X BLOCK END"
    def scan_directory(self, dir_path): return [os.path.join(r, f) for r, _, fs in os.walk(dir_path) for f in fs]
    def web_kalkani_yonet(self, site_list, block=True):
        self.hub.log(f"Web Kalkanı {'aktif' if block else 'deaktif'} ediliyor...", "GUARDIAN")
        try:
            with open(self.hosts_path, 'r') as f: lines = f.readlines()
            new_lines = [line for line in lines if self.block_marker_start not in line and self.block_marker_end not in line and "127.0.0.1" not in line and any(site in line for site in site_list) is False]
            if block and site_list:
                new_lines.append("\n" + self.block_marker_start + "\n")
                for site in site_list: new_lines.append(f"127.0.0.1\t{site}\n")
                new_lines.append(self.block_marker_end + "\n")
            with open(self.hosts_path, 'w') as f: f.writelines(new_lines)
            self.hub.log("Web Kalkanı başarıyla güncellendi.", "GUARDIAN")
        except PermissionError: messagebox.showerror("İzin Hatası", "Web sitelerini engellemek için Yönetici izni gerekli!")

class Aryus:
    def __init__(self, hub): self.hub = hub; self.focus_mode_active = False
    def odak_modu_baslat(self): self.focus_mode_active = True; self.hub.log("Akıllı Odak Modu başlatıldı.", "ARYUS")
    def odak_modu_durdur(self): self.focus_mode_active = False; self.hub.log("Akıllı Odak Modu durduruldu.", "ARYUS")

class AegisCore:
    def __init__(self, system_service, optimus, guardian, aryus, hub): self.system_service, self.optimus, self.guardian, self.aryus, self.hub = system_service, optimus, guardian, aryus, hub
    def odak_modunu_yonet(self, activate, app_list, site_list):
        if activate:
            self.hub.log("Odak Modu emri alındı..."); self.aryus.odak_modu_baslat(); self.optimus.dikkat_dagiticilari_yonet(app_list); self.guardian.web_kalkani_yonet(site_list, block=True)
        else:
            self.hub.log("Odak Modu'nu durdurma emri alındı..."); self.aryus.odak_modu_durdur(); self.guardian.web_kalkani_yonet(site_list, block=False)
        self.hub.broadcast_update("focus_mode_status")

#======================================================================
# ARAYÜZ KATMANI: MainWindow (Tümü Güncellendi)
#======================================================================
class MainWindow(tk.Tk):
    def __init__(self, hub, system_service, guardian, ai_core, config):
        super().__init__()
        self.hub, self.system_service, self.guardian, self.ai_core, self.config = hub, system_service, guardian, ai_core, config
        
        self.title("Aegis X: Akıcı Platform")
        self.geometry("950x750")
        self.configure(bg=Theme.BG_PRIMARY)

        # Akıcı animasyonlar için önceki değerleri sakla
        self.prev_cpu_val = 0
        self.prev_ram_val = 0
        
        self._setup_styles()
        self._load_icons()
        self.hub.register_ui_callback("log", lambda data: self._update_log_ui())
        self.hub.register_ui_callback("focus_mode_status", lambda data: self._update_focus_mode_ui())

        self._create_widgets()

    def _setup_styles(self):
        style = ttk.Style(self)
        style.theme_use('clam')
        style.configure("TNotebook", background=Theme.BG_PRIMARY, borderwidth=0)
        style.configure("TNotebook.Tab", background=Theme.BG_SECONDARY, foreground=Theme.TEXT_SECONDARY, padding=[15, 8], font=Theme.FONT_BOLD)
        style.map("TNotebook.Tab", background=[("selected", Theme.ACCENT_PRIMARY)], foreground=[("selected", "white")])
        style.configure("TFrame", background=Theme.BG_PRIMARY)
        style.configure("TLabel", background=Theme.BG_PRIMARY, foreground=Theme.TEXT_PRIMARY, font=Theme.FONT_DEFAULT)
        style.configure("TLabelframe", background=Theme.BG_PRIMARY, foreground=Theme.TEXT_PRIMARY, bordercolor="#444444")
        style.configure("TLabelframe.Label", background=Theme.BG_PRIMARY, foreground=Theme.ACCENT_PRIMARY, font=("Segoe UI", 12, "bold"))
        style.configure("Accent.TButton", font=('Segoe UI', 12, 'bold'), foreground='white', background=Theme.ACCENT_PRIMARY)
        style.configure("Green.Horizontal.TProgressbar", background=Theme.ACCENT_PRIMARY)

    def _load_icons(self):
        # YENİ: İkonları yükle (Dosyalar aynı klasörde olmalı)
        # Eğer ikon dosyaları bulunamazsa, program hata vermeden devam eder.
        try:
            self.hub_icon = tk.PhotoImage(file="icon_hub.png").subsample(2, 2)
            self.optimus_icon = tk.PhotoImage(file="icon_optimus.png").subsample(2, 2)
            self.guardian_icon = tk.PhotoImage(file="icon_guardian.png").subsample(2, 2)
            self.aryus_icon = tk.PhotoImage(file="icon_aryus.png").subsample(2, 2)
            self.icons_loaded = True
        except tk.TclError:
            self.icons_loaded = False
            print("İkon dosyaları bulunamadı. Program ikonsuz olarak devam edecek.")

    def _create_widgets(self):
        self.notebook = ttk.Notebook(self)
        self.notebook.pack(expand=True, fill='both', padx=5, pady=5)
        
        # Sekmeler...
        self.hub_tab = ttk.Frame(self.notebook, padding=10)
        self.optimus_tab = ttk.Frame(self.notebook, padding=10)
        self.guardian_tab = ttk.Frame(self.notebook, padding=10)
        self.aryus_tab = ttk.Frame(self.notebook, padding=10)

        # YENİ: İkonları sekmelere ekle
        if self.icons_loaded:
            self.notebook.add(self.hub_tab, text='AEGIS HUB', image=self.hub_icon, compound='left')
            self.notebook.add(self.optimus_tab, text='OPTIMUS', image=self.optimus_icon, compound='left')
            self.notebook.add(self.guardian_tab, text='GUARDIAN', image=self.guardian_icon, compound='left')
            self.notebook.add(self.aryus_tab, text='ARYUS', image=self.aryus_icon, compound='left')
        else: # İkon yoksa sadece metin
            self.notebook.add(self.hub_tab, text='💡 AEGIS HUB')
            self.notebook.add(self.optimus_tab, text='🚀 OPTIMUS')
            self.notebook.add(self.guardian_tab, text='🛡️ GUARDIAN')
            self.notebook.add(self.aryus_tab, text='🌌 ARYUS')

        self._create_hub_tab()
        self._create_optimus_tab()
        self._create_guardian_tab()
        self._create_aryus_tab()
        
        self.status_var = tk.StringVar(value="Hazır.")
        status_bar = ttk.Label(self, textvariable=self.status_var, relief="sunken", anchor="w", padding=5)
        status_bar.pack(side="bottom", fill="x")

    def _create_optimus_tab(self):
        self.optimus_frame = ttk.LabelFrame(self.optimus_tab, text="Canlı Sistem Durumu")
        self.optimus_frame.pack(fill="x", pady=5, padx=5, ipady=10)
        
        self.cpu_var = tk.StringVar(value="0.0 %")
        self.ram_var = tk.StringVar(value="0.0 %")
        
        ttk.Label(self.optimus_frame, text="CPU", font=Theme.FONT_LARGE, foreground=Theme.TEXT_SECONDARY).pack()
        ttk.Label(self.optimus_frame, textvariable=self.cpu_var, font=Theme.FONT_XLARGE_BOLD, foreground=Theme.ACCENT_PRIMARY).pack()
        
        ttk.Label(self.optimus_frame, text="RAM", font=Theme.FONT_LARGE, foreground=Theme.TEXT_SECONDARY, pady=(20,0)).pack()
        ttk.Label(self.optimus_frame, textvariable=self.ram_var, font=Theme.FONT_XLARGE_BOLD, foreground=Theme.ACCENT_PRIMARY).pack()

    # YENİ: Değerleri akıcı bir şekilde güncelleyen animasyon fonksiyonu
    def _animate_value(self, target_var, start_val, end_val, duration=300, steps=15, suffix=" %"):
        step_val = (end_val - start_val) / steps
        delay = duration // steps
        
        def update_step(current_step):
            new_val = start_val + (step_val * current_step)
            target_var.set(f"{new_val:.1f}{suffix}")
            if current_step < steps:
                self.after(delay, lambda: update_step(current_step + 1))
        
        update_step(1)

    # YENİ: Arka plan rengini yavaşça değiştiren animasyon fonksiyonu
    def _animate_color_pulse(self, widget, from_color, to_color, duration=500):
        # ... Renk geçişi için karmaşık bir mantık gerektirir, şimdilik basit bir yanıp sönme yapalım
        widget.config(background=to_color)
        self.after(duration, lambda: widget.config(background=from_color))
        
    def _update_live_stats(self):
        cpu_val = self.system_service.get_cpu_usage()
        ram_val = self.system_service.get_ram_usage()
        
        # Değerler değiştiyse animasyonu başlat
        if abs(cpu_val - self.prev_cpu_val) > 0.1:
            self._animate_value(self.cpu_var, self.prev_cpu_val, cpu_val)
            self.prev_cpu_val = cpu_val
        
        if abs(ram_val - self.prev_ram_val) > 0.1:
            self._animate_value(self.ram_var, self.prev_ram_val, ram_val)
            self.prev_ram_val = ram_val

        # YENİ: Yüksek CPU kullanımında görsel uyarı
        if cpu_val > 75:
            self.optimus_frame.config(style="Danger.TLabelframe")
        else:
            self.optimus_frame.config(style="TLabelframe")
        
        style = ttk.Style(self)
        style.configure("Danger.TLabelframe.Label", background=Theme.BG_PRIMARY, foreground=Theme.DANGER_COLOR, font=("Segoe UI", 12, "bold"))
        style.configure("Danger.TLabelframe", bordercolor=Theme.DANGER_COLOR)

    # Diğer UI oluşturma ve güncelleme fonksiyonları (Hub, Guardian, Aryus, Scan worker vb.)
    # Bu kısımlar önceki versiyonla büyük ölçüde aynıdır.
    def _create_hub_tab(self):
        # ...
        log_frame = ttk.LabelFrame(self.hub_tab, text="AEGIS CORE - Yapay Zeka Günlüğü")
        log_frame.pack(expand=True, fill="both")
        self.log_text = tk.Text(log_frame, state="disabled", bg=Theme.BG_WIDGET, fg=Theme.ACCENT_SECONDARY, font=Theme.FONT_MONO, wrap="word", relief="flat")
        self.log_text.pack(expand=True, fill="both")

    def _create_guardian_tab(self):
        # ...
        control_frame = ttk.Frame(self.guardian_tab)
        control_frame.pack(fill='x', pady=10)
        ttk.Button(control_frame, text="Dosya Tara").pack(side='left', expand=True, fill='x', padx=5, ipady=5)
        ttk.Button(control_frame, text="Klasör Tara").pack(side='left', expand=True, fill='x', padx=5, ipady=5)
        results_frame = ttk.LabelFrame(self.guardian_tab, text="Tarama Sonuçları")
        results_frame.pack(expand=True, fill='both', pady=10)
        # Treeview ve Progressbar burada...
        
    def _create_aryus_tab(self):
        # ...
        control_frame = ttk.LabelFrame(self.aryus_tab, text="Akıllı Odak Modu")
        control_frame.pack(fill="x", pady=5)
        self.focus_button = ttk.Button(control_frame, text="ODAK MODUNU BAŞLAT", style="Accent.TButton", command=self._toggle_focus_mode)
        self.focus_button.pack(pady=10, ipady=10, fill='x')
        self.focus_status_var = tk.StringVar(value="Durum: Pasif")
        ttk.Label(control_frame, textvariable=self.focus_status_var).pack()
        # Listbox'lar burada...

    def _toggle_focus_mode(self):
        is_active = self.ai_core.aryus.focus_mode_active
        self.ai_core.odak_modunu_yonet(not is_active, self.config.get("distraction_apps"), self.config.get("distraction_sites"))

    def _update_focus_mode_ui(self, data=None):
        if self.ai_core.aryus.focus_mode_active:
            self.focus_button.config(text="ODAK MODUNU DURDUR")
            self.focus_status_var.set("Durum: Aktif | Dikkat dağıtıcılar engellendi.")
        else:
            self.focus_button.config(text="ODAK MODUNU BAŞLAT")
            self.focus_status_var.set("Durum: Pasif")
            
    def _update_log_ui(self):
        self.log_text.config(state="normal")
        self.log_text.delete("1.0", "end")
        for msg in self.hub.log_queue: self.log_text.insert("end", msg + "\n")
        self.log_text.config(state="disabled")
        self.log_text.see("end")

#======================================================================
# PLATFORM BAŞLATICISI: AegisXPlatform
#======================================================================
class AegisXPlatform:
    def __init__(self):
        # ... (Önceki kodla aynı)
        self.config_manager = ConfigManager()
        self.system_service = SystemService()
        self.hub = AegisHub()
        self.optimus = OptimusHybrid(self.hub)
        self.guardian = AegisGuardian(self.hub)
        self.aryus = Aryus(self.hub)
        self.ai_core = AegisCore(self.system_service, self.optimus, self.guardian, self.aryus, self.hub)
        self.main_window = MainWindow(self.hub, self.system_service, self.guardian, self.ai_core, self.config_manager)

    def run_main_loop(self):
        self.main_window._update_live_stats()
        self.main_window.after(1000, self.run_main_loop) # Güncelleme sıklığını 1 saniyeye ayarladık

    def start(self):
        # ... (Önceki kodla aynı)
        print("Aegis X Akıcı Platformu başlatılıyor...")
        self.hub.log("Aegis X Platformu online.")
        self.run_main_loop()
        self.main_window.mainloop()

#======================================================================
# PROGRAMIN GİRİŞ NOKTASI
#======================================================================
if __name__ == "__main__":
    platform = AegisXPlatform()
    platform.start()
