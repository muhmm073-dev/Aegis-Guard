#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Aegis Guard v7.0 - B√ºy√ºk G√ºncelleme
Tek Dosya Profesyonel S√ºr√ºm
"""

import os, threading, time, sqlite3, psutil, hashlib, json
import customtkinter as ctk
from tkinter import messagebox, filedialog
from playsound import playsound
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from cryptography.fernet import Fernet
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from pydub import AudioSegment
from pydub.playback import play

APP_NAME = "Aegis Guard"
VERSION = "7.0 PRO"

# -------------------------------
# Temalar
# -------------------------------
THEMES = {
    "dark": {"bg":"#0f172a","fg":"#e2e8f0"},
    "light": {"bg":"#ffffff","fg":"#000000"}
}

# -------------------------------
# √áoklu Dil
# -------------------------------
LANG = {
    "tr":{"start":"Ba≈ülat","stop":"Durdur","logs":"Kayƒ±tlar",
          "optimize":"Oyun Modu","aryus":"Aryus Modu","quit":"√áƒ±kƒ±≈ü"},
    "en":{"start":"Start","stop":"Stop","logs":"Logs",
          "optimize":"Game Mode","aryus":"Aryus Mode","quit":"Quit"},
    "ru":{"start":"–ó–∞–ø—É—Å–∫","stop":"–°—Ç–æ–ø","logs":"–ñ—É—Ä–Ω–∞–ª—ã",
          "optimize":"–ò–≥—Ä–æ–≤–æ–π —Ä–µ–∂–∏–º","aryus":"–†–µ–∂–∏–º –ê—Ä–∏—É—Å","quit":"–í—ã—Ö–æ–¥"},
    "es":{"start":"Iniciar","stop":"Detener","logs":"Registros",
          "optimize":"Modo Juego","aryus":"Modo Aryus","quit":"Salir"},
    "fr":{"start":"D√©marrer","stop":"Arr√™ter","logs":"Journaux",
          "optimize":"Mode Jeu","aryus":"Mode Aryus","quit":"Quitter"},
    "de":{"start":"Starten","stop":"Stopp","logs":"Protokolle",
          "optimize":"Spielmodus","aryus":"Aryus Modus","quit":"Beenden"},
    "it":{"start":"Avvia","stop":"Ferma","logs":"Log",
          "optimize":"Modalit√† Gioco","aryus":"Modalit√† Aryus","quit":"Esci"}
}

# -------------------------------
# AES ≈ûifreleme Yardƒ±mcƒ±
# -------------------------------
class CryptoManager:
    def __init__(self,key_file="key.key"):
        if not os.path.exists(key_file):
            key = Fernet.generate_key()
            with open(key_file,"wb") as f: f.write(key)
        else:
            with open(key_file,"rb") as f: key = f.read()
        self.cipher = Fernet(key)

    def encrypt(self,data:str) -> bytes:
        return self.cipher.encrypt(data.encode())

    def decrypt(self,data:bytes) -> str:
        return self.cipher.decrypt(data).decode()

# -------------------------------
# Logger
# -------------------------------
class Logger:
    def __init__(self, ui_callback=None):
        self.ui_callback = ui_callback
        self.conn = sqlite3.connect("logs.db", check_same_thread=False)
        self._create_table()
        self.crypto = CryptoManager()

    def _create_table(self):
        cur = self.conn.cursor()
        cur.execute("""CREATE TABLE IF NOT EXISTS logs(
            timestamp TEXT,
            message BLOB
        )""")
        self.conn.commit()

    def log(self,msg):
        timestamp = time.strftime('%Y-%m-%d %H:%M:%S')
        enc = self.crypto.encrypt(msg)
        cur = self.conn.cursor()
        cur.execute("INSERT INTO logs VALUES (?,?)",(timestamp,enc))
        self.conn.commit()
        if self.ui_callback:
            self.ui_callback(f"{timestamp} - {msg}")

# -------------------------------
# G√ºvenlik Motoru
# -------------------------------
class FileHandler(FileSystemEventHandler):
    def __init__(self, logger):
        self.logger = logger
    def on_created(self, event):
        if not event.is_directory:
            self.logger.log(f"Yeni dosya olu≈üturuldu: {event.src_path}")
            self._check_file(event.src_path)
    def _check_file(self,path):
        try:
            with open(path,"rb") as f:
                h = hashlib.sha256(f.read()).hexdigest()
            if h.startswith("0000"): # √∂rnek sahte blacklist
                self.logger.log(f"‚ö° ≈û√ºpheli dosya bulundu: {path}")
        except: pass

class SecurityEngine:
    def __init__(self, logger):
        self.running = False
        self.logger = logger
        self.observer = Observer()

    def start(self):
        if self.running: return
        self.running = True
        self.logger.log("üõ°Ô∏è G√ºvenlik motoru ba≈ülatƒ±ldƒ±")
        event_handler = FileHandler(self.logger)
        self.observer.schedule(event_handler, ".", recursive=True)
        self.observer.start()
        threading.Thread(target=self._scan_loop, daemon=True).start()

    def stop(self):
        self.running = False
        self.logger.log("üõë G√ºvenlik motoru durduruldu")
        self.observer.stop()
        self.observer.join()

    def _scan_loop(self):
        while self.running:
            for conn in psutil.net_connections(kind="inet"):
                if conn.raddr and conn.raddr.port in [6666,1337]:
                    self.logger.log(f"üîç ≈û√ºpheli aƒü baƒülantƒ±sƒ±: {conn.raddr}")
            time.sleep(5)

# -------------------------------
# Oyun Modu
# -------------------------------
class GameOptimizer:
    def __init__(self, logger):
        self.active = False
        self.logger = logger

    def activate(self):
        if self.active: return
        self.active = True
        self.logger.log("üéÆ Oyun Modu aktif!")
        threading.Thread(target=self._boost_loop, daemon=True).start()

    def deactivate(self):
        self.active = False
        self.logger.log("üïπÔ∏è Oyun Modu kapandƒ±")

    def _boost_loop(self):
        while self.active:
            freed = psutil.virtual_memory().available // (1024*1024)
            cpu = psutil.cpu_percent()
            self.logger.log(f"RAM kullanƒ±labilir: {freed} MB | CPU: {cpu}%")
            time.sleep(5)

# -------------------------------
# Aryus Modu
# -------------------------------
class AryusMode:
    def __init__(self, logger):
        self.active = False
        self.logger = logger
        self.music_thread = None
        self.playlist = ["sounds/aryus_music.mp3"]

    def start(self):
        if self.active: return
        self.active = True
        self.logger.log("üåå Aryus modu aktif! M√ºzik √ßalƒ±yor...")
        self.music_thread = threading.Thread(target=self._play_music, daemon=True)
        self.music_thread.start()

    def stop(self):
        self.active = False
        self.logger.log("üåô Aryus modu kapandƒ±.")

    def _play_music(self):
        while self.active and self.playlist:
            for track in self.playlist:
                try:
                    song = AudioSegment.from_file(track)
                    play(song)
                except: continue
                if not self.active: break

# -------------------------------
# Ana UI
# -------------------------------
class AegisGuardApp(ctk.CTk):
    def __init__(self,lang="tr",theme="dark"):
        super().__init__()
        self.lang_code = lang
        self.lang = LANG[lang]
        self.theme = theme

        self.logger = Logger(self._ui_log)
        self.engine = SecurityEngine(self.logger)
        self.optimizer = GameOptimizer(self.logger)
        self.aryus = AryusMode(self.logger)

        self.title(f"{APP_NAME} v{VERSION}")
        self.geometry("1000x650")

        # Sekmeler
        self.tabs = ctk.CTkTabview(self)
        self.tabs.pack(fill="both",expand=True,padx=10,pady=10)

        self.tab_logs = self.tabs.add(self.lang["logs"])
        self.tab_security = self.tabs.add("Security")
        self.tab_game = self.tabs.add("Game Optimizer")
        self.tab_aryus = self.tabs.add("Aryus Mode")

        # Log ekranƒ±
        self.text = ctk.CTkTextbox(self.tab_logs,width=900,height=500)
        self.text.pack(padx=10,pady=10)

        # G√ºvenlik butonlarƒ±
        ctk.CTkButton(self.tab_security,text=self.lang["start"],command=self._start_engine).pack(pady=5)
        ctk.CTkButton(self.tab_security,text=self.lang["stop"],command=self._stop_engine).pack(pady=5)

        # Optimizer butonlarƒ±
        ctk.CTkButton(self.tab_game,text=self.lang["optimize"],command=self._toggle_opt).pack(pady=5)

        # Aryus butonlarƒ±
        ctk.CTkButton(self.tab_aryus,text=self.lang["aryus"],command=self._toggle_aryus).pack(pady=5)

        # √áƒ±kƒ±≈ü
        ctk.CTkButton(self,text=self.lang["quit"],command=self._quit).pack(pady=5)

    def _ui_log(self,msg):
        self.text.insert("end",f"{msg}\n")
        self.text.see("end")

    def _start_engine(self): self.engine.start()
    def _stop_engine(self): self.engine.stop()

    def _toggle_opt(self):
        if not self.optimizer.active: self.optimizer.activate()
        else: self.optimizer.deactivate()

    def _toggle_aryus(self):
        if not self.aryus.active: self.aryus.start()
        else: self.aryus.stop()

    def _quit(self):
        if messagebox.askyesno("Exit","Uygulamadan √ßƒ±kmak istiyor musunuz?"):
            self.engine.stop()
            self.optimizer.deactivate()
            self.aryus.stop()
            self.destroy()

# -------------------------------
# Main
# -------------------------------
if __name__ == "__main__":
    ctk.set_appearance_mode("dark")
    app = AegisGuardApp(lang="tr",theme="dark")
    app.mainloop()